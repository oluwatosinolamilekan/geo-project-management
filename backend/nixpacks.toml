[phases.setup]
nixPkgs = ['php82', 'php82Packages.composer', 'nodejs-18_x']

[phases.install]
cmds = [
  'composer install --no-dev --optimize-autoloader --no-scripts'
]

[phases.build]
cmds = [
  'cp env.example .env',
  'echo "DEBUG: Contents of .env file:"',
  'cat .env',
  'echo "DEBUG: Checking for APP_KEY line:"',
  'grep -n "APP_KEY" .env || echo "No APP_KEY found"',
  'mkdir -p public storage/app storage/framework/cache storage/framework/sessions storage/framework/testing storage/framework/views storage/logs',
  'echo "<?php use Illuminate\\Foundation\\Application; use Illuminate\\Http\\Request; define(\"LARAVEL_START\", microtime(true)); if (file_exists(\$maintenance = __DIR__.\"/../storage/framework/maintenance.php\")) { require \$maintenance; } require_once __DIR__.\"/../vendor/autoload.php\"; \$app = require_once __DIR__.\"/../bootstrap/app.php\"; \$kernel = \$app->make(Illuminate\\Contracts\\Http\\Kernel::class); \$response = \$kernel->handle(\$request = Illuminate\\Http\\Request::capture()); \$response->send(); \$kernel->terminate(\$request, \$response);" > public/index.php',
  'chmod -R 775 storage bootstrap/cache public',
  'php artisan config:clear',
  'php artisan key:generate --force --no-interaction',
  'echo "DEBUG: Testing database connection..."',
  'php artisan tinker --execute="DB::connection()->getPdo(); echo \"Database connection successful\\n\";" || echo "Database connection failed"',
  'echo "DEBUG: Checking environment variables..."',
  'env | grep -E "^(DB_|DATABASE_)" | sort',
  'echo "DEBUG: Checking if tables exist..."',
  'php artisan tinker --execute="try { DB::table(\"migrations\")->count(); echo \"Migrations table exists\\n\"; } catch (Exception \$e) { echo \"Migrations table does not exist\\n\"; }"',
  'echo "DEBUG: Checking migration status..."',
  'php artisan migrate:status --no-interaction || echo "Could not get migration status"',
  'echo "DEBUG: Setting environment to skip users table migration..."',
  'echo "DEBUG: Running migrations with users table skipped..."',
  'SKIP_USERS_TABLE_MIGRATION=true php artisan migrate:fresh --force --no-interaction -v 2>&1 || { echo "Fresh migration failed, trying regular migration..."; SKIP_USERS_TABLE_MIGRATION=true php artisan migrate --force --no-interaction -v 2>&1 || { echo "Migration failed with exit code $?"; echo "Attempting to rollback and retry..."; php artisan migrate:rollback --force --no-interaction 2>&1 || echo "Rollback failed"; SKIP_USERS_TABLE_MIGRATION=true php artisan migrate --force --no-interaction -v 2>&1 || { echo "Final migration attempt failed"; exit 1; }; }; }',
  'echo "DEBUG: Creating users table manually via SQL..."',
  'php artisan tinker --execute="try { DB::statement(\\\"CREATE TABLE IF NOT EXISTS users (id BIGSERIAL PRIMARY KEY, name VARCHAR(255) NOT NULL, email VARCHAR(255) UNIQUE NOT NULL, email_verified_at TIMESTAMP NULL, password VARCHAR(255) NOT NULL, remember_token VARCHAR(100) NULL, created_at TIMESTAMP NULL, updated_at TIMESTAMP NULL)\\\"); echo \\\"Users table created successfully via SQL\\\\n\\\"; } catch (Exception \\$e) { echo \\\"Users table creation failed: \\\" . \\$e->getMessage() . \\\"\\\\n\\\"; echo \\\"Continuing anyway...\\\\n\\\"; }" 2>&1 || echo "Manual users table creation failed but continuing..."',
  'echo "DEBUG: Running seeders..."',
  'php artisan db:seed --force --no-interaction 2>&1 || echo "Seeding failed but continuing..."',
  'php artisan config:cache --no-interaction',
  'php artisan route:cache --no-interaction'
]

[start]
cmd = 'php artisan serve --host=0.0.0.0 --port=$PORT'
